// /**
//  * –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç—ã —Å Telegram API
//  */
// export class TelegramService {
//   constructor(env) {
//     this.botToken = env.TG_BOT_TOKEN;
//     this.webhookSecret = env.TG_WEBHOOK;
//   }

//   /**
//    * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
//    */
//   async sendMessage(chatId, text, parseMode = 'HTML') {
//     return this.tgApi('sendMessage', {
//       chat_id: chatId,
//       text: text,
//       parse_mode: parseMode
//     });
//   }

//   /**
//    * –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
//    */
//   async sendInvoice(chatId, videoUrl) {
//     return this.tgApi('sendInvoice', {
//       chat_id: chatId,
//       title: 'üìπ TLDR + –≥–ª–∞–≤—ã YouTube –≤–∏–¥–µ–æ',
//       description: `–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∏ –≥–ª–∞–≤ –¥–ª—è –≤–∏–¥–µ–æ: ${videoUrl.substring(0, 30)}...`,
//       payload: videoUrl,
//       currency: 'XTR',
//       prices: [{ label: '1 –≤–∏–¥–µ–æ', amount: 100 }],
//       start_parameter: 'tldr1'
//     });
//   }

//   /**
//    * –û—Ç–≤–µ—Ç –Ω–∞ pre-checkout –∑–∞–ø—Ä–æ—Å
//    */
//   async answerPreCheckout(preCheckoutQueryId, ok = true) {
//     return this.tgApi('answerPreCheckoutQuery', {
//       pre_checkout_query_id: preCheckoutQueryId,
//       ok: ok
//     });
//   }

//   /**
//    * –û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–æ–≤ Telegram API
//    */
//   async tgApi(method, body) {
//     try {
//       const response = await fetch(`https://api.telegram.org/bot${this.botToken}/${method}`, {
//         method: 'POST',
//         headers: { 'Content-Type': 'application/json' },
//         body: JSON.stringify(body)
//       });

//       if (!response.ok) {
//         throw new Error(`Telegram API error: ${response.status}`);
//       }

//       return await response.json();
//     } catch (error) {
//       console.error('Telegram API call error:', error.message);
//       throw error;
//     }
//   }

//   /**
//    * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è Telegram
//    */
//   formatResultForTelegram(data) {
//     if (!data.success || !data.tldr) {
//       return 'üòï –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å TLDR –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ.';
//     }

//     const chaptersText = data.chapters && data.chapters.length > 0
//       ? data.chapters.slice(0, 10).map((ch, i) => 
//           `${i + 1}. ${ch.time || '00:00'} ‚Äî ${ch.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`
//         ).join('\n')
//       : '‚Äî –ì–ª–∞–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚Äî';

//     return `üé¨ <b>${data.videoTitle || data.videoId}</b>\n\n` +
//            `<b>üìù TL;DR</b>\n${data.tldr}\n\n` +
//            `<b>üìñ –ì–ª–∞–≤—ã</b>\n${chaptersText}\n\n` +
//            `<i>‚ö°Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ ${data.responseTime || 0}–º—Å</i>`;
//   }

//   /**
//    * –í–∞–ª–∏–¥–∞—Ü–∏—è webhook —Å–µ–∫—Ä–µ—Ç–∞
//    */
//   validateWebhookSecret(request) {
//     const secret = request.headers.get('X-Telegram-Bot-Api-Secret-Token');
//     return secret === this.webhookSecret;
//   }
// }


/**
 * –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç—ã —Å Telegram API (Stars/XTR)
 * - –ß–∏—Ç–∞–µ—Ç —Ç–æ–∫–µ–Ω/—Å–µ–∫—Ä–µ—Ç –∏–∑ env: TG_BOT_TOKEN, TG_WEBHOOK (—Å —Ñ–æ–ª–±—ç–∫–∞–º–∏)
 * - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Telegram-Bot-Api-Secret-Token
 * - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç sendMessage / sendInvoice / answerPreCheckoutQuery
 * - –ü–æ–¥—Ä–µ–∑–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥ –ª–∏–º–∏—Ç Telegram (~4096 —Å–∏–º–≤–æ–ª–æ–≤)
 */
export class TelegramService {
  constructor(env) {
    this.env = env;
    this.token  = (env.TG_BOT_TOKEN || env.TELEGRAM_BOT_TOKEN || '').trim();
    this.secret = (env.TG_WEBHOOK   || env.TG_WEBHOOK_SECRET   || '').trim();

    // ‚ûú –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –ø–æ–ª–æ–∂–∏–ª –≤ —Å–µ–∫—Ä–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "bot123:ABC", —É–±–µ—Ä—ë–º "bot"
    if (this.token.toLowerCase().startsWith('bot')) {
      this.token = this.token.replace(/^bot/i, '');
    }

    this.API_BASE = 'https://api.telegram.org';
    this.MAX_MSG_LEN = 3800;
  }

  async getMe() {
    const url = `${this.API_BASE}/bot${this.token}/getMe`;
    const res = await fetch(url);
    const text = await res.text().catch(() => '');
    if (!res.ok) throw new Error(`getMe HTTP ${res.status} ${text}`);
    return JSON.parse(text);
  }

  async tgApi(method, body) {
    const url = `${this.API_BASE}/bot${this.token}/${method}`;
    const res = await fetch(url, {
      method: 'POST',
      headers: { 'content-type': 'application/json' },
      body: JSON.stringify(body)
    });
    const text = await res.text().catch(() => '');
    if (!res.ok) {
      throw new Error(`Telegram API error: ${res.status} ${res.statusText} @${method} - ${text.slice(0,1000)}`);
    }
    return JSON.parse(text);
  }

  validateWebhookSecret(request) {
    const header = request.headers.get('X-Telegram-Bot-Api-Secret-Token') || '';
    return Boolean(header) && Boolean(this.secret) && header === this.secret;
  }

  /** –£—Ç–∏–ª–∏—Ç–∞: –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–µ–∑–∞—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç */
  truncate(text, max = this.MAX_MSG_LEN) {
    if (!text) return '';
    const s = String(text);
    return s.length > max ? `${s.slice(0, max - 1)}‚Ä¶` : s;
  }

  /** –£—Ç–∏–ª–∏—Ç–∞: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ (—Å –æ–±—Ä–µ–∑–∫–æ–π –ø–æ–¥ –ª–∏–º–∏—Ç) */
  async sendMessage(chatId, text, parseMode = 'HTML', options = {}) {
    const safe = this.truncate(text, this.MAX_MSG_LEN);
    return this.tgApi('sendMessage', {
      chat_id: chatId,
      text: safe,
      parse_mode: parseMode,
      ...options
    });
  }

  /** –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç–∞ –≤ Stars/XTR (–±–µ–∑ provider_token –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —É—Å–ª—É–≥) */
  async sendInvoice(chatId, videoUrl) {
    const shortUrl = (videoUrl || '').slice(0, 120); // –¥–ª—è description
    return this.tgApi('sendInvoice', {
      chat_id: chatId,
      title: 'üìπ TLDR + –≥–ª–∞–≤—ã YouTube',
      description: `–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∏ –≥–ª–∞–≤ –¥–ª—è: ${shortUrl}`,
      payload: videoUrl,           // –≤–µ—Ä–Ω—ë—Ç—Å—è –≤ successful_payment.invoice_payload
      currency: 'XTR',             // Telegram Stars
      prices: [{ label: '1 –≤–∏–¥–µ–æ', amount: 100 }], // 100 Stars
      start_parameter: 'tldr1'
      // provider_token –ù–ï —É–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è Stars
    });
  }

  /** –û—Ç–≤–µ—Ç –Ω–∞ pre-checkout (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫) */
  async answerPreCheckout(preCheckoutQueryId, ok = true) {
    return this.tgApi('answerPreCheckoutQuery', {
      pre_checkout_query_id: preCheckoutQueryId,
      ok
    });
  }

  /** –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è Telegram —Å —É—á—ë—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤ –¥–ª–∏–Ω—ã */
  formatResultForTelegram(data) {
    if (!data?.success || !data?.tldr) {
      return 'üòï –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å TLDR –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ.';
    }

    const title = data.videoTitle || data.videoId || '–í–∏–¥–µ–æ';
    const tldrRaw = String(data.tldr || '').trim();

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –≥–ª–∞–≤—ã
    const chapters = Array.isArray(data.chapters) ? data.chapters : [];
    const lines = chapters.slice(0, 20).map((ch, i) => {
      const t = (ch?.time || '00:00').trim();
      const name = (ch?.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è').trim();
      return `${i + 1}. ${t} ‚Äî ${name}`;
    });
    const chaptersText = lines.length ? lines.join('\n') : '‚Äî –ì–ª–∞–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚Äî';

    // –°–±–æ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    let message =
      `üé¨ <b>${this.escapeHtml(title)}</b>\n\n` +
      `<b>üìù TL;DR</b>\n${this.escapeHtml(tldrRaw)}\n\n` +
      `<b>üìñ –ì–ª–∞–≤—ã</b>\n${this.escapeHtml(chaptersText)}`;

    // –£–ª–æ–∂–∏–º—Å—è –≤ –ª–∏–º–∏—Ç
    message = this.truncate(message, this.MAX_MSG_LEN);

    // –ù–µ–º–Ω–æ–≥–æ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏/–¥–ª–∏–Ω–µ ‚Äî –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–Ω–∞
    if (typeof data.responseTime === 'number') {
      message = this.truncate(`${message}\n\n<i>‚ö°Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ ${data.responseTime} –º—Å</i>`, this.MAX_MSG_LEN);
    }

    return message;
  }

  /** –ú–∏–Ω–∏-—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è parse_mode=HTML */
  escapeHtml(s) {
    return String(s)
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;');
  }
}
